// source: triton.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = function() {
  return this || window || global || self || Function("return this")();
}.call(null);

goog.exportSymbol(
  "inference_naint_GRPCInferenceService.InferParameter",
  null,
  global
);
goog.exportSymbol(
  "inference_naint_GRPCInferenceService.InferParameter.ParameterChoiceCase",
  null,
  global
);
goog.exportSymbol(
  "inference_naint_GRPCInferenceService.InferTensorContents",
  null,
  global
);
goog.exportSymbol(
  "inference_naint_GRPCInferenceService.ModelInferRequest",
  null,
  global
);
goog.exportSymbol(
  "inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor",
  null,
  global
);
goog.exportSymbol(
  "inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor",
  null,
  global
);
goog.exportSymbol(
  "inference_naint_GRPCInferenceService.ModelInferResponse",
  null,
  global
);
goog.exportSymbol(
  "inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor",
  null,
  global
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
inference_naint_GRPCInferenceService.InferParameter = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_
  );
};
goog.inherits(
  inference_naint_GRPCInferenceService.InferParameter,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  inference_naint_GRPCInferenceService.InferParameter.displayName =
    "inference_naint_GRPCInferenceService.InferParameter";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
inference_naint_GRPCInferenceService.InferTensorContents = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    inference_naint_GRPCInferenceService.InferTensorContents.repeatedFields_,
    null
  );
};
goog.inherits(
  inference_naint_GRPCInferenceService.InferTensorContents,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  inference_naint_GRPCInferenceService.InferTensorContents.displayName =
    "inference_naint_GRPCInferenceService.InferTensorContents";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
inference_naint_GRPCInferenceService.ModelInferRequest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    inference_naint_GRPCInferenceService.ModelInferRequest.repeatedFields_,
    null
  );
};
goog.inherits(
  inference_naint_GRPCInferenceService.ModelInferRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.displayName =
    "inference_naint_GRPCInferenceService.ModelInferRequest";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor = function(
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor
      .repeatedFields_,
    null
  );
};
goog.inherits(
  inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.displayName =
    "inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor = function(
  opt_data
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  inference_naint_GRPCInferenceService.ModelInferRequest
    .InferRequestedOutputTensor,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.displayName =
    "inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
inference_naint_GRPCInferenceService.ModelInferResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    inference_naint_GRPCInferenceService.ModelInferResponse.repeatedFields_,
    null
  );
};
goog.inherits(
  inference_naint_GRPCInferenceService.ModelInferResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  inference_naint_GRPCInferenceService.ModelInferResponse.displayName =
    "inference_naint_GRPCInferenceService.ModelInferResponse";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor = function(
  opt_data
) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor
      .repeatedFields_,
    null
  );
};
goog.inherits(
  inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.displayName =
    "inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor";
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
inference_naint_GRPCInferenceService.InferParameter.oneofGroups_ = [
  [1, 2, 3, 4, 5],
];

/**
 * @enum {number}
 */
inference_naint_GRPCInferenceService.InferParameter.ParameterChoiceCase = {
  PARAMETER_CHOICE_NOT_SET: 0,
  BOOL_PARAM: 1,
  INT64_PARAM: 2,
  STRING_PARAM: 3,
  DOUBLE_PARAM: 4,
  UINT64_PARAM: 5,
};

/**
 * @return {inference_naint_GRPCInferenceService.InferParameter.ParameterChoiceCase}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.getParameterChoiceCase = function() {
  return /** @type {inference_naint_GRPCInferenceService.InferParameter.ParameterChoiceCase} */ (jspb.Message.computeOneofCase(
    this,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0]
  ));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  inference_naint_GRPCInferenceService.InferParameter.prototype.toObject = function(
    opt_includeInstance
  ) {
    return inference_naint_GRPCInferenceService.InferParameter.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!inference_naint_GRPCInferenceService.InferParameter} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  inference_naint_GRPCInferenceService.InferParameter.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        boolParam: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        int64Param: jspb.Message.getFieldWithDefault(msg, 2, 0),
        stringParam: jspb.Message.getFieldWithDefault(msg, 3, ""),
        doubleParam: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
        uint64Param: jspb.Message.getFieldWithDefault(msg, 5, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!inference_naint_GRPCInferenceService.InferParameter}
 */
inference_naint_GRPCInferenceService.InferParameter.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new inference_naint_GRPCInferenceService.InferParameter();
  return inference_naint_GRPCInferenceService.InferParameter.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!inference_naint_GRPCInferenceService.InferParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!inference_naint_GRPCInferenceService.InferParameter}
 */
inference_naint_GRPCInferenceService.InferParameter.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setBoolParam(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setInt64Param(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setStringParam(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setDoubleParam(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setUint64Param(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  inference_naint_GRPCInferenceService.InferParameter.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!inference_naint_GRPCInferenceService.InferParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
inference_naint_GRPCInferenceService.InferParameter.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(1, f);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(2, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(4, f);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(5, f);
  }
};

/**
 * optional bool bool_param = 1;
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.getBoolParam = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
    this,
    1,
    false
  ));
};

/**
 * @param {boolean} value
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.setBoolParam = function(
  value
) {
  return jspb.Message.setOneofField(
    this,
    1,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    value
  );
};

/**
 * Clears the field making it undefined.
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.clearBoolParam = function() {
  return jspb.Message.setOneofField(
    this,
    1,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    undefined
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.hasBoolParam = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional int64 int64_param = 2;
 * @return {number}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.getInt64Param = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.setInt64Param = function(
  value
) {
  return jspb.Message.setOneofField(
    this,
    2,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    value
  );
};

/**
 * Clears the field making it undefined.
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.clearInt64Param = function() {
  return jspb.Message.setOneofField(
    this,
    2,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    undefined
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.hasInt64Param = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string string_param = 3;
 * @return {string}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.getStringParam = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.setStringParam = function(
  value
) {
  return jspb.Message.setOneofField(
    this,
    3,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    value
  );
};

/**
 * Clears the field making it undefined.
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.clearStringParam = function() {
  return jspb.Message.setOneofField(
    this,
    3,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    undefined
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.hasStringParam = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional double double_param = 4;
 * @return {number}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.getDoubleParam = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(
    this,
    4,
    0.0
  ));
};

/**
 * @param {number} value
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.setDoubleParam = function(
  value
) {
  return jspb.Message.setOneofField(
    this,
    4,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    value
  );
};

/**
 * Clears the field making it undefined.
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.clearDoubleParam = function() {
  return jspb.Message.setOneofField(
    this,
    4,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    undefined
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.hasDoubleParam = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional uint64 uint64_param = 5;
 * @return {number}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.getUint64Param = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.setUint64Param = function(
  value
) {
  return jspb.Message.setOneofField(
    this,
    5,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    value
  );
};

/**
 * Clears the field making it undefined.
 * @return {!inference_naint_GRPCInferenceService.InferParameter} returns this
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.clearUint64Param = function() {
  return jspb.Message.setOneofField(
    this,
    5,
    inference_naint_GRPCInferenceService.InferParameter.oneofGroups_[0],
    undefined
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.InferParameter.prototype.hasUint64Param = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
inference_naint_GRPCInferenceService.InferTensorContents.repeatedFields_ = [
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  inference_naint_GRPCInferenceService.InferTensorContents.prototype.toObject = function(
    opt_includeInstance
  ) {
    return inference_naint_GRPCInferenceService.InferTensorContents.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!inference_naint_GRPCInferenceService.InferTensorContents} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  inference_naint_GRPCInferenceService.InferTensorContents.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        boolContentsList:
          (f = jspb.Message.getRepeatedBooleanField(msg, 1)) == null
            ? undefined
            : f,
        intContentsList:
          (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
        int64ContentsList:
          (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
        uintContentsList:
          (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
        uint64ContentsList:
          (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
        fp32ContentsList:
          (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null
            ? undefined
            : f,
        fp64ContentsList:
          (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null
            ? undefined
            : f,
        bytesContentsList: msg.getBytesContentsList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents}
 */
inference_naint_GRPCInferenceService.InferTensorContents.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new inference_naint_GRPCInferenceService.InferTensorContents();
  return inference_naint_GRPCInferenceService.InferTensorContents.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!inference_naint_GRPCInferenceService.InferTensorContents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents}
 */
inference_naint_GRPCInferenceService.InferTensorContents.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var values = /** @type {!Array<boolean>} */ (reader.isDelimited()
          ? reader.readPackedBool()
          : [reader.readBool()]);
        for (var i = 0; i < values.length; i++) {
          msg.addBoolContents(values[i]);
        }
        break;
      case 2:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedInt32()
          : [reader.readInt32()]);
        for (var i = 0; i < values.length; i++) {
          msg.addIntContents(values[i]);
        }
        break;
      case 3:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedInt64()
          : [reader.readInt64()]);
        for (var i = 0; i < values.length; i++) {
          msg.addInt64Contents(values[i]);
        }
        break;
      case 4:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedUint32()
          : [reader.readUint32()]);
        for (var i = 0; i < values.length; i++) {
          msg.addUintContents(values[i]);
        }
        break;
      case 5:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedUint64()
          : [reader.readUint64()]);
        for (var i = 0; i < values.length; i++) {
          msg.addUint64Contents(values[i]);
        }
        break;
      case 6:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedFloat()
          : [reader.readFloat()]);
        for (var i = 0; i < values.length; i++) {
          msg.addFp32Contents(values[i]);
        }
        break;
      case 7:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedDouble()
          : [reader.readDouble()]);
        for (var i = 0; i < values.length; i++) {
          msg.addFp64Contents(values[i]);
        }
        break;
      case 8:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addBytesContents(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  inference_naint_GRPCInferenceService.InferTensorContents.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!inference_naint_GRPCInferenceService.InferTensorContents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
inference_naint_GRPCInferenceService.InferTensorContents.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getBoolContentsList();
  if (f.length > 0) {
    writer.writePackedBool(1, f);
  }
  f = message.getIntContentsList();
  if (f.length > 0) {
    writer.writePackedInt32(2, f);
  }
  f = message.getInt64ContentsList();
  if (f.length > 0) {
    writer.writePackedInt64(3, f);
  }
  f = message.getUintContentsList();
  if (f.length > 0) {
    writer.writePackedUint32(4, f);
  }
  f = message.getUint64ContentsList();
  if (f.length > 0) {
    writer.writePackedUint64(5, f);
  }
  f = message.getFp32ContentsList();
  if (f.length > 0) {
    writer.writePackedFloat(6, f);
  }
  f = message.getFp64ContentsList();
  if (f.length > 0) {
    writer.writePackedDouble(7, f);
  }
  f = message.getBytesContentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(8, f);
  }
};

/**
 * repeated bool bool_contents = 1;
 * @return {!Array<boolean>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getBoolContentsList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(
    this,
    1
  ));
};

/**
 * @param {!Array<boolean>} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setBoolContentsList = function(
  value
) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addBoolContents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearBoolContentsList = function() {
  return this.setBoolContentsList([]);
};

/**
 * repeated int32 int_contents = 2;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getIntContentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setIntContentsList = function(
  value
) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addIntContents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearIntContentsList = function() {
  return this.setIntContentsList([]);
};

/**
 * repeated int64 int64_contents = 3;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getInt64ContentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setInt64ContentsList = function(
  value
) {
  return jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addInt64Contents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearInt64ContentsList = function() {
  return this.setInt64ContentsList([]);
};

/**
 * repeated uint32 uint_contents = 4;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getUintContentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setUintContentsList = function(
  value
) {
  return jspb.Message.setField(this, 4, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addUintContents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearUintContentsList = function() {
  return this.setUintContentsList([]);
};

/**
 * repeated uint64 uint64_contents = 5;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getUint64ContentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setUint64ContentsList = function(
  value
) {
  return jspb.Message.setField(this, 5, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addUint64Contents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearUint64ContentsList = function() {
  return this.setUint64ContentsList([]);
};

/**
 * repeated float fp32_contents = 6;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getFp32ContentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(
    this,
    6
  ));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setFp32ContentsList = function(
  value
) {
  return jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addFp32Contents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearFp32ContentsList = function() {
  return this.setFp32ContentsList([]);
};

/**
 * repeated double fp64_contents = 7;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getFp64ContentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(
    this,
    7
  ));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setFp64ContentsList = function(
  value
) {
  return jspb.Message.setField(this, 7, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addFp64Contents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearFp64ContentsList = function() {
  return this.setFp64ContentsList([]);
};

/**
 * repeated bytes bytes_contents = 8;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getBytesContentsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
    this,
    8
  ));
};

/**
 * repeated bytes bytes_contents = 8;
 * This is a type-conversion wrapper around `getBytesContentsList()`
 * @return {!Array<string>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getBytesContentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getBytesContentsList()
  ));
};

/**
 * repeated bytes bytes_contents = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesContentsList()`
 * @return {!Array<!Uint8Array>}
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.getBytesContentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getBytesContentsList()
  ));
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.setBytesContentsList = function(
  value
) {
  return jspb.Message.setField(this, 8, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.addBytesContents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.InferTensorContents} returns this
 */
inference_naint_GRPCInferenceService.InferTensorContents.prototype.clearBytesContentsList = function() {
  return this.setBytesContentsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
inference_naint_GRPCInferenceService.ModelInferRequest.repeatedFields_ = [
  5,
  6,
  7,
];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return inference_naint_GRPCInferenceService.ModelInferRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!inference_naint_GRPCInferenceService.ModelInferRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        modelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        modelVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
        id: jspb.Message.getFieldWithDefault(msg, 3, ""),
        parametersMap: (f = msg.getParametersMap())
          ? f.toObject(
              includeInstance,
              inference_naint_GRPCInferenceService.InferParameter.toObject
            )
          : [],
        inputsList: jspb.Message.toObjectList(
          msg.getInputsList(),
          inference_naint_GRPCInferenceService.ModelInferRequest
            .InferInputTensor.toObject,
          includeInstance
        ),
        outputsList: jspb.Message.toObjectList(
          msg.getOutputsList(),
          inference_naint_GRPCInferenceService.ModelInferRequest
            .InferRequestedOutputTensor.toObject,
          includeInstance
        ),
        rawInputContentsList: msg.getRawInputContentsList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new inference_naint_GRPCInferenceService.ModelInferRequest();
  return inference_naint_GRPCInferenceService.ModelInferRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelVersion(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 4:
        var value = msg.getParametersMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            inference_naint_GRPCInferenceService.InferParameter
              .deserializeBinaryFromReader,
            "",
            new inference_naint_GRPCInferenceService.InferParameter()
          );
        });
        break;
      case 5:
        var value = new inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor();
        reader.readMessage(
          value,
          inference_naint_GRPCInferenceService.ModelInferRequest
            .InferInputTensor.deserializeBinaryFromReader
        );
        msg.addInputs(value);
        break;
      case 6:
        var value = new inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor();
        reader.readMessage(
          value,
          inference_naint_GRPCInferenceService.ModelInferRequest
            .InferRequestedOutputTensor.deserializeBinaryFromReader
        );
        msg.addOutputs(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addRawInputContents(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  inference_naint_GRPCInferenceService.ModelInferRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
inference_naint_GRPCInferenceService.ModelInferRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getModelVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      4,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      inference_naint_GRPCInferenceService.InferParameter
        .serializeBinaryToWriter
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor
        .serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      inference_naint_GRPCInferenceService.ModelInferRequest
        .InferRequestedOutputTensor.serializeBinaryToWriter
    );
  }
  f = message.getRawInputContentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(7, f);
  }
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.repeatedFields_ = [
  3,
];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.toObject = function(
    opt_includeInstance
  ) {
    return inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        datatype: jspb.Message.getFieldWithDefault(msg, 2, ""),
        shapeList:
          (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
        parametersMap: (f = msg.getParametersMap())
          ? f.toObject(
              includeInstance,
              inference_naint_GRPCInferenceService.InferParameter.toObject
            )
          : [],
        contents:
          (f = msg.getContents()) &&
          inference_naint_GRPCInferenceService.InferTensorContents.toObject(
            includeInstance,
            f
          ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor();
  return inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDatatype(value);
        break;
      case 3:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedInt64()
          : [reader.readInt64()]);
        for (var i = 0; i < values.length; i++) {
          msg.addShape(values[i]);
        }
        break;
      case 4:
        var value = msg.getParametersMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            inference_naint_GRPCInferenceService.InferParameter
              .deserializeBinaryFromReader,
            "",
            new inference_naint_GRPCInferenceService.InferParameter()
          );
        });
        break;
      case 5:
        var value = new inference_naint_GRPCInferenceService.InferTensorContents();
        reader.readMessage(
          value,
          inference_naint_GRPCInferenceService.InferTensorContents
            .deserializeBinaryFromReader
        );
        msg.setContents(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDatatype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(3, f);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      4,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      inference_naint_GRPCInferenceService.InferParameter
        .serializeBinaryToWriter
    );
  }
  f = message.getContents();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      inference_naint_GRPCInferenceService.InferTensorContents
        .serializeBinaryToWriter
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.setName = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string datatype = 2;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.getDatatype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.setDatatype = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated int64 shape = 3;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.getShapeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.setShapeList = function(
  value
) {
  return jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.addShape = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.clearShapeList = function() {
  return this.setShapeList([]);
};

/**
 * map<string, InferParameter> parameters = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.getParametersMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>} */ (jspb.Message.getMapField(
    this,
    4,
    opt_noLazyCreate,
    inference_naint_GRPCInferenceService.InferParameter
  ));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
  return this;
};

/**
 * optional InferTensorContents contents = 5;
 * @return {?inference_naint_GRPCInferenceService.InferTensorContents}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.getContents = function() {
  return /** @type{?inference_naint_GRPCInferenceService.InferTensorContents} */ (jspb.Message.getWrapperField(
    this,
    inference_naint_GRPCInferenceService.InferTensorContents,
    5
  ));
};

/**
 * @param {?inference_naint_GRPCInferenceService.InferTensorContents|undefined} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.setContents = function(
  value
) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.clearContents = function() {
  return this.setContents(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor.prototype.hasContents = function() {
  return jspb.Message.getField(this, 5) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.prototype.toObject = function(
    opt_includeInstance
  ) {
    return inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        parametersMap: (f = msg.getParametersMap())
          ? f.toObject(
              includeInstance,
              inference_naint_GRPCInferenceService.InferParameter.toObject
            )
          : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor();
  return inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = msg.getParametersMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            inference_naint_GRPCInferenceService.InferParameter
              .deserializeBinaryFromReader,
            "",
            new inference_naint_GRPCInferenceService.InferParameter()
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      inference_naint_GRPCInferenceService.InferParameter
        .serializeBinaryToWriter
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.prototype.setName = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * map<string, InferParameter> parameters = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.prototype.getParametersMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>} */ (jspb.Message.getMapField(
    this,
    2,
    opt_noLazyCreate,
    inference_naint_GRPCInferenceService.InferParameter
  ));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
  return this;
};

/**
 * optional string model_name = 1;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.setModelName = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string model_version = 2;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getModelVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.setModelVersion = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string id = 3;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.setId = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * map<string, InferParameter> parameters = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getParametersMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>} */ (jspb.Message.getMapField(
    this,
    4,
    opt_noLazyCreate,
    inference_naint_GRPCInferenceService.InferParameter
  ));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
  return this;
};

/**
 * repeated InferInputTensor inputs = 5;
 * @return {!Array<!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getInputsList = function() {
  return /** @type{!Array<!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor,
    5
  ));
};

/**
 * @param {!Array<!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor>} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.setInputsList = function(
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor=} opt_value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.addInputs = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    5,
    opt_value,
    inference_naint_GRPCInferenceService.ModelInferRequest.InferInputTensor,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};

/**
 * repeated InferRequestedOutputTensor outputs = 6;
 * @return {!Array<!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getOutputsList = function() {
  return /** @type{!Array<!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    inference_naint_GRPCInferenceService.ModelInferRequest
      .InferRequestedOutputTensor,
    6
  ));
};

/**
 * @param {!Array<!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor>} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.setOutputsList = function(
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor=} opt_value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest.InferRequestedOutputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.addOutputs = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    6,
    opt_value,
    inference_naint_GRPCInferenceService.ModelInferRequest
      .InferRequestedOutputTensor,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};

/**
 * repeated bytes raw_input_contents = 7;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getRawInputContentsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
    this,
    7
  ));
};

/**
 * repeated bytes raw_input_contents = 7;
 * This is a type-conversion wrapper around `getRawInputContentsList()`
 * @return {!Array<string>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getRawInputContentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getRawInputContentsList()
  ));
};

/**
 * repeated bytes raw_input_contents = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawInputContentsList()`
 * @return {!Array<!Uint8Array>}
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.getRawInputContentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getRawInputContentsList()
  ));
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.setRawInputContentsList = function(
  value
) {
  return jspb.Message.setField(this, 7, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.addRawInputContents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferRequest} returns this
 */
inference_naint_GRPCInferenceService.ModelInferRequest.prototype.clearRawInputContentsList = function() {
  return this.setRawInputContentsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
inference_naint_GRPCInferenceService.ModelInferResponse.repeatedFields_ = [
  5,
  6,
];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  inference_naint_GRPCInferenceService.ModelInferResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return inference_naint_GRPCInferenceService.ModelInferResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!inference_naint_GRPCInferenceService.ModelInferResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  inference_naint_GRPCInferenceService.ModelInferResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        modelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        modelVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
        id: jspb.Message.getFieldWithDefault(msg, 3, ""),
        parametersMap: (f = msg.getParametersMap())
          ? f.toObject(
              includeInstance,
              inference_naint_GRPCInferenceService.InferParameter.toObject
            )
          : [],
        outputsList: jspb.Message.toObjectList(
          msg.getOutputsList(),
          inference_naint_GRPCInferenceService.ModelInferResponse
            .InferOutputTensor.toObject,
          includeInstance
        ),
        rawOutputContentsList: msg.getRawOutputContentsList_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new inference_naint_GRPCInferenceService.ModelInferResponse();
  return inference_naint_GRPCInferenceService.ModelInferResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!inference_naint_GRPCInferenceService.ModelInferResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setModelVersion(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 4:
        var value = msg.getParametersMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            inference_naint_GRPCInferenceService.InferParameter
              .deserializeBinaryFromReader,
            "",
            new inference_naint_GRPCInferenceService.InferParameter()
          );
        });
        break;
      case 5:
        var value = new inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor();
        reader.readMessage(
          value,
          inference_naint_GRPCInferenceService.ModelInferResponse
            .InferOutputTensor.deserializeBinaryFromReader
        );
        msg.addOutputs(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addRawOutputContents(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  inference_naint_GRPCInferenceService.ModelInferResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!inference_naint_GRPCInferenceService.ModelInferResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
inference_naint_GRPCInferenceService.ModelInferResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getModelVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      4,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      inference_naint_GRPCInferenceService.InferParameter
        .serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor
        .serializeBinaryToWriter
    );
  }
  f = message.getRawOutputContentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(6, f);
  }
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.repeatedFields_ = [
  3,
];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.toObject = function(
    opt_includeInstance
  ) {
    return inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        datatype: jspb.Message.getFieldWithDefault(msg, 2, ""),
        shapeList:
          (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
        parametersMap: (f = msg.getParametersMap())
          ? f.toObject(
              includeInstance,
              inference_naint_GRPCInferenceService.InferParameter.toObject
            )
          : [],
        contents:
          (f = msg.getContents()) &&
          inference_naint_GRPCInferenceService.InferTensorContents.toObject(
            includeInstance,
            f
          ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor();
  return inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDatatype(value);
        break;
      case 3:
        var values = /** @type {!Array<number>} */ (reader.isDelimited()
          ? reader.readPackedInt64()
          : [reader.readInt64()]);
        for (var i = 0; i < values.length; i++) {
          msg.addShape(values[i]);
        }
        break;
      case 4:
        var value = msg.getParametersMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            inference_naint_GRPCInferenceService.InferParameter
              .deserializeBinaryFromReader,
            "",
            new inference_naint_GRPCInferenceService.InferParameter()
          );
        });
        break;
      case 5:
        var value = new inference_naint_GRPCInferenceService.InferTensorContents();
        reader.readMessage(
          value,
          inference_naint_GRPCInferenceService.InferTensorContents
            .deserializeBinaryFromReader
        );
        msg.setContents(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDatatype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writePackedInt64(3, f);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      4,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      inference_naint_GRPCInferenceService.InferParameter
        .serializeBinaryToWriter
    );
  }
  f = message.getContents();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      inference_naint_GRPCInferenceService.InferTensorContents
        .serializeBinaryToWriter
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.setName = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string datatype = 2;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.getDatatype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.setDatatype = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated int64 shape = 3;
 * @return {!Array<number>}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.getShapeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};

/**
 * @param {!Array<number>} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.setShapeList = function(
  value
) {
  return jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.addShape = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.clearShapeList = function() {
  return this.setShapeList([]);
};

/**
 * map<string, InferParameter> parameters = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.getParametersMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>} */ (jspb.Message.getMapField(
    this,
    4,
    opt_noLazyCreate,
    inference_naint_GRPCInferenceService.InferParameter
  ));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
  return this;
};

/**
 * optional InferTensorContents contents = 5;
 * @return {?inference_naint_GRPCInferenceService.InferTensorContents}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.getContents = function() {
  return /** @type{?inference_naint_GRPCInferenceService.InferTensorContents} */ (jspb.Message.getWrapperField(
    this,
    inference_naint_GRPCInferenceService.InferTensorContents,
    5
  ));
};

/**
 * @param {?inference_naint_GRPCInferenceService.InferTensorContents|undefined} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.setContents = function(
  value
) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.clearContents = function() {
  return this.setContents(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor.prototype.hasContents = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional string model_name = 1;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.setModelName = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string model_version = 2;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getModelVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.setModelVersion = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string id = 3;
 * @return {string}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.setId = function(
  value
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * map<string, InferParameter> parameters = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getParametersMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!inference_naint_GRPCInferenceService.InferParameter>} */ (jspb.Message.getMapField(
    this,
    4,
    opt_noLazyCreate,
    inference_naint_GRPCInferenceService.InferParameter
  ));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
  return this;
};

/**
 * repeated InferOutputTensor outputs = 5;
 * @return {!Array<!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor>}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getOutputsList = function() {
  return /** @type{!Array<!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor,
    5
  ));
};

/**
 * @param {!Array<!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor>} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.setOutputsList = function(
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor=} opt_value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.addOutputs = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    5,
    opt_value,
    inference_naint_GRPCInferenceService.ModelInferResponse.InferOutputTensor,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};

/**
 * repeated bytes raw_output_contents = 6;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getRawOutputContentsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
    this,
    6
  ));
};

/**
 * repeated bytes raw_output_contents = 6;
 * This is a type-conversion wrapper around `getRawOutputContentsList()`
 * @return {!Array<string>}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getRawOutputContentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
    this.getRawOutputContentsList()
  ));
};

/**
 * repeated bytes raw_output_contents = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawOutputContentsList()`
 * @return {!Array<!Uint8Array>}
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.getRawOutputContentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getRawOutputContentsList()
  ));
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.setRawOutputContentsList = function(
  value
) {
  return jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.addRawOutputContents = function(
  value,
  opt_index
) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!inference_naint_GRPCInferenceService.ModelInferResponse} returns this
 */
inference_naint_GRPCInferenceService.ModelInferResponse.prototype.clearRawOutputContentsList = function() {
  return this.setRawOutputContentsList([]);
};

goog.object.extend(exports, inference_naint_GRPCInferenceService);
